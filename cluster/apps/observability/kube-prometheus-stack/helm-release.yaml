---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.13
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_SLACK_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
                  {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
                    {{" "}}(
                    {{- with .CommonLabels.Remove .GroupLabels.Names }}
                      {{- range $index, $label := .SortedPairs -}}
                        {{ if $index }}, {{ end }}
                        {{- $label.Name }}="{{ $label.Value -}}"
                      {{- end }}
                    {{- end -}}
                    )
                  {{- end }}
                text: >-
                  {{ with index .Alerts 0 -}}
                    :chart_with_upwards_trend: *<{{ .GeneratorURL }}|Graph>*
                    {{- if .Annotations.runbook }}   :notebook: *<{{ .Annotations.runbook }}|Runbook*>{{ end }}
                  {{ end }}

                  *Alert details*:

                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  *Description:* {{ .Annotations.description }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "slack"
              continue: true
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-staging"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-basic-auth@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/icon: "alert-circle"
          hajimari.io/appName: "alert-manager"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
            secretName: "alert-manager-${SECRET_DOMAIN//./-}-tls"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 10Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.0.10
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.0.10
    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.0.10
    kubeEtcd:
      enabled: true
      endpoints:
        - 192.168.0.10
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-staging"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "networking-basic-auth@kubernetescrd"
          hajimari.io/enable: "true"
          hajimari.io/icon: "database-arrow-up"
          hajimari.io/appName: "prometheus"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
            secretName: "prometheus-${SECRET_DOMAIN//./-}-tls"
      prometheusSpec:
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 14d
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "nfs-client"
              resources:
                requests:
                  storage: 50Gi
